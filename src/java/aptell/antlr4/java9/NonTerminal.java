package aptell.antlr4.java9;

enum NonTerminal {

  AdditionalBound(1),
  AdditiveExpression(2),
  AmbiguousName(3),
  AndExpression(4),
  Annotation(5),
  AnnotationTypeBody(6),
  AnnotationTypeDeclaration(7),
  AnnotationTypeElementDeclaration(8),
  AnnotationTypeElementModifier(9),
  AnnotationTypeMemberDeclaration(10),
  ArgumentList(11),
  ArrayAccess(12),
  ArrayAccess_lf_primary(13),
  ArrayAccess_lfno_primary(14),
  ArrayCreationExpression(15),
  ArrayInitializer(16),
  ArrayType(17),
  AssertStatement(18),
  Assignment(19),
  AssignmentExpression(20),
  AssignmentOperator(21),
  BasicForStatement(22),
  BasicForStatementNoShortIf(23),
  Block(24),
  BlockStatement(25),
  BlockStatements(26),
  BreakStatement(27),
  CastExpression(28),
  CatchClause(29),
  CatchFormalParameter(30),
  CatchType(31),
  Catches(32),
  ClassBody(33),
  ClassBodyDeclaration(34),
  ClassDeclaration(35),
  ClassInstanceCreationExpression(36),
  ClassInstanceCreationExpression_lf_primary(37),
  ClassInstanceCreationExpression_lfno_primary(38),
  ClassLiteral(39),
  ClassMemberDeclaration(40),
  ClassModifier(41),
  ClassOrInterfaceType(42),
  ClassType(43),
  ClassType_lf_classOrInterfaceType(44),
  ClassType_lfno_classOrInterfaceType(45),
  CompilationUnit(46),
  ConditionalAndExpression(47),
  ConditionalExpression(48),
  ConditionalOrExpression(49),
  ConstantDeclaration(50),
  ConstantExpression(51),
  ConstantModifier(52),
  ConstructorBody(53),
  ConstructorDeclaration(54),
  ConstructorDeclarator(55),
  ConstructorModifier(56),
  ContinueStatement(57),
  DefaultValue(58),
  DimExpr(59),
  DimExprs(60),
  Dims(61),
  DoStatement(62),
  ElementValue(63),
  ElementValueArrayInitializer(64),
  ElementValueList(65),
  ElementValuePair(66),
  ElementValuePairList(67),
  EmptyStatement(68),
  EnhancedForStatement(69),
  EnhancedForStatementNoShortIf(70),
  EnumBody(71),
  EnumBodyDeclarations(72),
  EnumConstant(73),
  EnumConstantList(74),
  EnumConstantModifier(75),
  EnumConstantName(76),
  EnumDeclaration(77),
  EqualityExpression(78),
  ExceptionType(79),
  ExceptionTypeList(80),
  ExclusiveOrExpression(81),
  ExplicitConstructorInvocation(82),
  Expression(83),
  ExpressionName(84),
  ExpressionStatement(85),
  ExtendsInterfaces(86),
  FieldAccess(87),
  FieldAccess_lf_primary(88),
  FieldAccess_lfno_primary(89),
  FieldDeclaration(90),
  FieldModifier(91),
  Finally_(92),
  FloatingPointType(93),
  ForInit(94),
  ForStatement(95),
  ForStatementNoShortIf(96),
  ForUpdate(97),
  FormalParameter(98),
  FormalParameterList(99),
  FormalParameters(100),
  IfThenElseStatement(101),
  IfThenElseStatementNoShortIf(102),
  IfThenStatement(103),
  ImportDeclaration(104),
  InclusiveOrExpression(105),
  InferredFormalParameterList(106),
  InstanceInitializer(107),
  IntegralType(108),
  InterfaceBody(109),
  InterfaceDeclaration(110),
  InterfaceMemberDeclaration(111),
  InterfaceMethodDeclaration(112),
  InterfaceMethodModifier(113),
  InterfaceModifier(114),
  InterfaceType(115),
  InterfaceTypeList(116),
  InterfaceType_lf_classOrInterfaceType(117),
  InterfaceType_lfno_classOrInterfaceType(118),
  LabeledStatement(119),
  LabeledStatementNoShortIf(120),
  LambdaBody(121),
  LambdaExpression(122),
  LambdaParameters(123),
  LastFormalParameter(124),
  LeftHandSide(125),
  Literal(126),
  LocalVariableDeclaration(127),
  LocalVariableDeclarationStatement(128),
  MarkerAnnotation(129),
  MethodBody(130),
  MethodDeclaration(131),
  MethodDeclarator(132),
  MethodHeader(133),
  MethodInvocation(134),
  MethodInvocation_lf_primary(135),
  MethodInvocation_lfno_primary(136),
  MethodModifier(137),
  MethodName(138),
  MethodReference(139),
  MethodReference_lf_primary(140),
  MethodReference_lfno_primary(141),
  ModularCompilation(142),
  ModuleDeclaration(143),
  ModuleDirective(144),
  ModuleName(145),
  MultiplicativeExpression(146),
  NormalAnnotation(147),
  NormalClassDeclaration(148),
  NormalInterfaceDeclaration(149),
  NumericType(150),
  OrdinaryCompilation(151),
  PackageDeclaration(152),
  PackageModifier(153),
  PackageName(154),
  PackageOrTypeName(155),
  PostDecrementExpression(156),
  PostDecrementExpression_lf_postfixExpression(157),
  PostIncrementExpression(158),
  PostIncrementExpression_lf_postfixExpression(159),
  PostfixExpression(160),
  PreDecrementExpression(161),
  PreIncrementExpression(162),
  Primary(163),
  PrimaryNoNewArray(164),
  PrimaryNoNewArray_lf_arrayAccess(165),
  PrimaryNoNewArray_lf_primary(166),
  PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(167),
  PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(168),
  PrimaryNoNewArray_lfno_arrayAccess(169),
  PrimaryNoNewArray_lfno_primary(170),
  PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(171),
  PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(172),
  PrimitiveType(173),
  ReceiverParameter(174),
  ReferenceType(175),
  RelationalExpression(176),
  RequiresModifier(177),
  Resource(178),
  ResourceList(179),
  ResourceSpecification(180),
  Result(181),
  ReturnStatement(182),
  ShiftExpression(183),
  SimpleTypeName(184),
  SingleElementAnnotation(185),
  SingleStaticImportDeclaration(186),
  SingleTypeImportDeclaration(187),
  Statement(188),
  StatementExpression(189),
  StatementExpressionList(190),
  StatementNoShortIf(191),
  StatementWithoutTrailingSubstatement(192),
  StaticImportOnDemandDeclaration(193),
  StaticInitializer(194),
  Superclass(195),
  Superinterfaces(196),
  SwitchBlock(197),
  SwitchBlockStatementGroup(198),
  SwitchLabel(199),
  SwitchLabels(200),
  SwitchStatement(201),
  SynchronizedStatement(202),
  ThrowStatement(203),
  Throws_(204),
  TryStatement(205),
  TryWithResourcesStatement(206),
  Type(207),
  TypeArgument(208),
  TypeArgumentList(209),
  TypeArguments(210),
  TypeArgumentsOrDiamond(211),
  TypeBound(212),
  TypeDeclaration(213),
  TypeImportOnDemandDeclaration(214),
  TypeName(215),
  TypeParameter(216),
  TypeParameterList(217),
  TypeParameterModifier(218),
  TypeParameters(219),
  TypeVariable(220),
  UnannArrayType(221),
  UnannClassOrInterfaceType(222),
  UnannClassType(223),
  UnannClassType_lf_unannClassOrInterfaceType(224),
  UnannClassType_lfno_unannClassOrInterfaceType(225),
  UnannInterfaceType(226),
  UnannInterfaceType_lf_unannClassOrInterfaceType(227),
  UnannInterfaceType_lfno_unannClassOrInterfaceType(228),
  UnannPrimitiveType(229),
  UnannReferenceType(230),
  UnannType(231),
  UnannTypeVariable(232),
  UnaryExpression(233),
  UnaryExpressionNotPlusMinus(234),
  VariableAccess(235),
  VariableDeclarator(236),
  VariableDeclaratorId(237),
  VariableDeclaratorList(238),
  VariableInitializer(239),
  VariableInitializerList(240),
  VariableModifier(241),
  WhileStatement(242),
  WhileStatementNoShortIf(243),
  Wildcard(244),
  WildcardBounds(245);

  final int code;

  private NonTerminal(int code) {
    this.code = code;
  }


}
